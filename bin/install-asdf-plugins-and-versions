#!/bin/bash

function print_message {
  printf -- "--> %s...\n" "$1"
}

function allow_use_of_legacy_version_files {
  echo "legacy_version_file = yes" > "$HOME/.asdfrc"
}

function tool_versions {
  # Initialize an empty array to store tool names and versions
  local TOOLS=()

  # Check if .ruby-version exists and add "ruby" and version number to the array if it does
  if [ -f .ruby-version ]; then
    RUBY_VERSION=$(cat .ruby-version)
    TOOLS+=("ruby $RUBY_VERSION")
  fi

  # Check if .nvmrc exists and add "nodejs" and version number to the array if it does
  if [ -f .nvmrc ]; then
    NODE_VERSION=$(cat .nvmrc)
    TOOLS+=("nodejs $NODE_VERSION")
  fi

  # Check if .tool-versions exists and add each tool name and version number to the array, overwriting Ruby and Node.js versions if present
  if [ -f .tool-versions ]; then
    while read -r line; do
      TOOL_NAME=$(echo "$line" | awk '{print $1}')
      TOOL_VERSION=$(echo "$line" | awk '{print $2}')
      if [ "$TOOL_NAME" == "ruby" ]; then
        TOOLS=("${TOOLS[@]/ruby*/}") # remove any existing "ruby" entries
      elif [ "$TOOL_NAME" == "nodejs" ]; then
        TOOLS=("${TOOLS[@]/nodejs*/}") # remove any existing "nodejs" entries
      fi
      TOOLS+=("$TOOL_NAME $TOOL_VERSION")
    done < .tool-versions
  fi

  # Print the list of tool names and version numbers
  printf '%s\n' "${TOOLS[@]}"
}

function install_plugins {
  # Iterate through the list of tool names and add each one as an ASDF plugin
  local TOOL_NAMES=($(tool_versions | awk '{print $1}'))
  for tool_name in "${TOOL_NAMES[@]}"; do
    print_message "Adding ASDF plugin for $tool_name"
    asdf plugin-add "$tool_name"
  done
}

function reshim {
  print_message "Reshimming to make sure tools are available when restoring from cache"
  asdf reshim
}

function install_tools {
  print_message "Installing ASDF versions"
  asdf install
}

allow_use_of_legacy_version_files
install_plugins
install_tools
reshim
